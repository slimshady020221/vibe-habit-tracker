{"ast":null,"code":"import _objectSpread from\"C:/Users/\\uAE40\\uBBFC\\uADDC/AppData/Local/npm-cache/_npx/cd53aabf71f3f793/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/utils/localStorage.js (Day 14 최종 정리 버전)\nconst HABIT_STORAGE_KEY='vibe_habits';/**\n * LocalStorage에서 습관 목록을 불러옵니다.\n * @returns {Array} 습관 목록\n */export const loadHabits=()=>{try{const serializedHabits=localStorage.getItem(HABIT_STORAGE_KEY);if(serializedHabits===null){return[];}const habits=JSON.parse(serializedHabits);return Array.isArray(habits)?habits:[];}catch(e){return[];}};/**\n * 습관 목록을 LocalStorage에 저장합니다.\n * @param {Array} habits - 저장할 습관 목록\n */export const saveHabits=habits=>{try{const serializedHabits=JSON.stringify(habits);localStorage.setItem(HABIT_STORAGE_KEY,serializedHabits);}catch(e){}};/**\n * 습관 객체의 오늘의 기록을 체크하거나 체크 해제합니다.\n * @param {Object} habit - 습관 객체\n * @returns {Object} 기록이 업데이트된 습관 객체\n */export const checkHabitToday=habit=>{const today=new Date().toDateString();const records=habit.records||[];if(records.includes(today)){// 이미 기록된 경우 제거 (체크 해제)\nreturn _objectSpread(_objectSpread({},habit),{},{records:records.filter(date=>date!==today)});}else{// 기록 추가 (체크)\nreturn _objectSpread(_objectSpread({},habit),{},{records:[...records,today]});}};/**\n * 특정 습관의 연속 성공일(Streak)을 계산합니다.\n * (Day 2 구현 로직 - 간단화)\n * @param {Object} habit - 습관 객체\n * @returns {number} 연속 성공일 수\n */export const getStreak=habit=>{if(!habit.records||habit.records.length===0)return 0;return habit.records.length;};","map":{"version":3,"names":["HABIT_STORAGE_KEY","loadHabits","serializedHabits","localStorage","getItem","habits","JSON","parse","Array","isArray","e","saveHabits","stringify","setItem","checkHabitToday","habit","today","Date","toDateString","records","includes","_objectSpread","filter","date","getStreak","length"],"sources":["C:/Users/김민규/Desktop/vibe-habit-tracker/src/utils/localStorage.js"],"sourcesContent":["// src/utils/localStorage.js (Day 14 최종 정리 버전)\n\nconst HABIT_STORAGE_KEY = 'vibe_habits';\n\n/**\n * LocalStorage에서 습관 목록을 불러옵니다.\n * @returns {Array} 습관 목록\n */\nexport const loadHabits = () => {\n    try {\n        const serializedHabits = localStorage.getItem(HABIT_STORAGE_KEY);\n        if (serializedHabits === null) {\n            return [];\n        }\n        const habits = JSON.parse(serializedHabits);\n        return Array.isArray(habits) ? habits : [];\n    } catch (e) {\n        return [];\n    }\n};\n\n/**\n * 습관 목록을 LocalStorage에 저장합니다.\n * @param {Array} habits - 저장할 습관 목록\n */\nexport const saveHabits = (habits) => {\n    try {\n        const serializedHabits = JSON.stringify(habits);\n        localStorage.setItem(HABIT_STORAGE_KEY, serializedHabits);\n    } catch (e) {\n    }\n};\n\n/**\n * 습관 객체의 오늘의 기록을 체크하거나 체크 해제합니다.\n * @param {Object} habit - 습관 객체\n * @returns {Object} 기록이 업데이트된 습관 객체\n */\nexport const checkHabitToday = (habit) => {\n    const today = new Date().toDateString();\n    const records = habit.records || [];\n\n    if (records.includes(today)) {\n        // 이미 기록된 경우 제거 (체크 해제)\n        return {\n            ...habit,\n            records: records.filter(date => date !== today)\n        };\n    } else {\n        // 기록 추가 (체크)\n        return {\n            ...habit,\n            records: [...records, today]\n        };\n    }\n};\n\n/**\n * 특정 습관의 연속 성공일(Streak)을 계산합니다.\n * (Day 2 구현 로직 - 간단화)\n * @param {Object} habit - 습관 객체\n * @returns {number} 연속 성공일 수\n */\nexport const getStreak = (habit) => {\n    if (!habit.records || habit.records.length === 0) return 0;\n    return habit.records.length; \n};"],"mappings":"8JAAA;AAEA,KAAM,CAAAA,iBAAiB,CAAG,aAAa,CAEvC;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CAC5B,GAAI,CACA,KAAM,CAAAC,gBAAgB,CAAGC,YAAY,CAACC,OAAO,CAACJ,iBAAiB,CAAC,CAChE,GAAIE,gBAAgB,GAAK,IAAI,CAAE,CAC3B,MAAO,EAAE,CACb,CACA,KAAM,CAAAG,MAAM,CAAGC,IAAI,CAACC,KAAK,CAACL,gBAAgB,CAAC,CAC3C,MAAO,CAAAM,KAAK,CAACC,OAAO,CAACJ,MAAM,CAAC,CAAGA,MAAM,CAAG,EAAE,CAC9C,CAAE,MAAOK,CAAC,CAAE,CACR,MAAO,EAAE,CACb,CACJ,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,UAAU,CAAIN,MAAM,EAAK,CAClC,GAAI,CACA,KAAM,CAAAH,gBAAgB,CAAGI,IAAI,CAACM,SAAS,CAACP,MAAM,CAAC,CAC/CF,YAAY,CAACU,OAAO,CAACb,iBAAiB,CAAEE,gBAAgB,CAAC,CAC7D,CAAE,MAAOQ,CAAC,CAAE,CACZ,CACJ,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAI,eAAe,CAAIC,KAAK,EAAK,CACtC,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC,CACvC,KAAM,CAAAC,OAAO,CAAGJ,KAAK,CAACI,OAAO,EAAI,EAAE,CAEnC,GAAIA,OAAO,CAACC,QAAQ,CAACJ,KAAK,CAAC,CAAE,CACzB;AACA,OAAAK,aAAA,CAAAA,aAAA,IACON,KAAK,MACRI,OAAO,CAAEA,OAAO,CAACG,MAAM,CAACC,IAAI,EAAIA,IAAI,GAAKP,KAAK,CAAC,GAEvD,CAAC,IAAM,CACH;AACA,OAAAK,aAAA,CAAAA,aAAA,IACON,KAAK,MACRI,OAAO,CAAE,CAAC,GAAGA,OAAO,CAAEH,KAAK,CAAC,GAEpC,CACJ,CAAC,CAED;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAQ,SAAS,CAAIT,KAAK,EAAK,CAChC,GAAI,CAACA,KAAK,CAACI,OAAO,EAAIJ,KAAK,CAACI,OAAO,CAACM,MAAM,GAAK,CAAC,CAAE,MAAO,EAAC,CAC1D,MAAO,CAAAV,KAAK,CAACI,OAAO,CAACM,MAAM,CAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}