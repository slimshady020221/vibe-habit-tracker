{"ast":null,"code":"// src/utils/localStorage.js (Day 14 최종 정리 버전)\n\nconst HABIT_STORAGE_KEY = 'vibe_habits';\n\n/**\n * LocalStorage에서 습관 목록을 불러옵니다.\n * @returns {Array} 습관 목록\n */\nexport const loadHabits = () => {\n  try {\n    const serializedHabits = localStorage.getItem(HABIT_STORAGE_KEY);\n    if (serializedHabits === null) {\n      return [];\n    }\n    const habits = JSON.parse(serializedHabits);\n    return Array.isArray(habits) ? habits : [];\n  } catch (e) {\n    return [];\n  }\n};\n\n/**\n * 습관 목록을 LocalStorage에 저장합니다.\n * @param {Array} habits - 저장할 습관 목록\n */\nexport const saveHabits = habits => {\n  try {\n    const serializedHabits = JSON.stringify(habits);\n    localStorage.setItem(HABIT_STORAGE_KEY, serializedHabits);\n  } catch (e) {}\n};\n\n/**\n * 습관 객체의 오늘의 기록을 체크하거나 체크 해제합니다.\n * @param {Object} habit - 습관 객체\n * @returns {Object} 기록이 업데이트된 습관 객체\n */\nexport const checkHabitToday = habit => {\n  const today = new Date().toDateString();\n  const records = habit.records || [];\n  if (records.includes(today)) {\n    // 이미 기록된 경우 제거 (체크 해제)\n    return {\n      ...habit,\n      records: records.filter(date => date !== today)\n    };\n  } else {\n    // 기록 추가 (체크)\n    return {\n      ...habit,\n      records: [...records, today]\n    };\n  }\n};\n\n/**\n * 특정 습관의 연속 성공일(Streak)을 계산합니다.\n * (Day 2 구현 로직 - 간단화)\n * @param {Object} habit - 습관 객체\n * @returns {number} 연속 성공일 수\n */\nexport const getStreak = habit => {\n  if (!habit.records || habit.records.length === 0) return 0;\n  return habit.records.length;\n};","map":{"version":3,"names":["HABIT_STORAGE_KEY","loadHabits","serializedHabits","localStorage","getItem","habits","JSON","parse","Array","isArray","e","saveHabits","stringify","setItem","checkHabitToday","habit","today","Date","toDateString","records","includes","filter","date","getStreak","length"],"sources":["C:/Users/김민규/Desktop/vibe-habit-tracker/src/utils/localStorage.js"],"sourcesContent":["// src/utils/localStorage.js (Day 14 최종 정리 버전)\n\nconst HABIT_STORAGE_KEY = 'vibe_habits';\n\n/**\n * LocalStorage에서 습관 목록을 불러옵니다.\n * @returns {Array} 습관 목록\n */\nexport const loadHabits = () => {\n    try {\n        const serializedHabits = localStorage.getItem(HABIT_STORAGE_KEY);\n        if (serializedHabits === null) {\n            return [];\n        }\n        const habits = JSON.parse(serializedHabits);\n        return Array.isArray(habits) ? habits : [];\n    } catch (e) {\n        return [];\n    }\n};\n\n/**\n * 습관 목록을 LocalStorage에 저장합니다.\n * @param {Array} habits - 저장할 습관 목록\n */\nexport const saveHabits = (habits) => {\n    try {\n        const serializedHabits = JSON.stringify(habits);\n        localStorage.setItem(HABIT_STORAGE_KEY, serializedHabits);\n    } catch (e) {\n    }\n};\n\n/**\n * 습관 객체의 오늘의 기록을 체크하거나 체크 해제합니다.\n * @param {Object} habit - 습관 객체\n * @returns {Object} 기록이 업데이트된 습관 객체\n */\nexport const checkHabitToday = (habit) => {\n    const today = new Date().toDateString();\n    const records = habit.records || [];\n\n    if (records.includes(today)) {\n        // 이미 기록된 경우 제거 (체크 해제)\n        return {\n            ...habit,\n            records: records.filter(date => date !== today)\n        };\n    } else {\n        // 기록 추가 (체크)\n        return {\n            ...habit,\n            records: [...records, today]\n        };\n    }\n};\n\n/**\n * 특정 습관의 연속 성공일(Streak)을 계산합니다.\n * (Day 2 구현 로직 - 간단화)\n * @param {Object} habit - 습관 객체\n * @returns {number} 연속 성공일 수\n */\nexport const getStreak = (habit) => {\n    if (!habit.records || habit.records.length === 0) return 0;\n    return habit.records.length; \n};"],"mappings":"AAAA;;AAEA,MAAMA,iBAAiB,GAAG,aAAa;;AAEvC;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAC5B,IAAI;IACA,MAAMC,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAACJ,iBAAiB,CAAC;IAChE,IAAIE,gBAAgB,KAAK,IAAI,EAAE;MAC3B,OAAO,EAAE;IACb;IACA,MAAMG,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACL,gBAAgB,CAAC;IAC3C,OAAOM,KAAK,CAACC,OAAO,CAACJ,MAAM,CAAC,GAAGA,MAAM,GAAG,EAAE;EAC9C,CAAC,CAAC,OAAOK,CAAC,EAAE;IACR,OAAO,EAAE;EACb;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAIN,MAAM,IAAK;EAClC,IAAI;IACA,MAAMH,gBAAgB,GAAGI,IAAI,CAACM,SAAS,CAACP,MAAM,CAAC;IAC/CF,YAAY,CAACU,OAAO,CAACb,iBAAiB,EAAEE,gBAAgB,CAAC;EAC7D,CAAC,CAAC,OAAOQ,CAAC,EAAE,CACZ;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,eAAe,GAAIC,KAAK,IAAK;EACtC,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC;EACvC,MAAMC,OAAO,GAAGJ,KAAK,CAACI,OAAO,IAAI,EAAE;EAEnC,IAAIA,OAAO,CAACC,QAAQ,CAACJ,KAAK,CAAC,EAAE;IACzB;IACA,OAAO;MACH,GAAGD,KAAK;MACRI,OAAO,EAAEA,OAAO,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,KAAKN,KAAK;IAClD,CAAC;EACL,CAAC,MAAM;IACH;IACA,OAAO;MACH,GAAGD,KAAK;MACRI,OAAO,EAAE,CAAC,GAAGA,OAAO,EAAEH,KAAK;IAC/B,CAAC;EACL;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,SAAS,GAAIR,KAAK,IAAK;EAChC,IAAI,CAACA,KAAK,CAACI,OAAO,IAAIJ,KAAK,CAACI,OAAO,CAACK,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;EAC1D,OAAOT,KAAK,CAACI,OAAO,CAACK,MAAM;AAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}